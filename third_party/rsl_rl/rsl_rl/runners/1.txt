   def log(self, locs, width=80, pad=35):


        # 初始化 reward 历史记录（如果没有）
        if not hasattr(self, "reward_history"):
            self.reward_history = {
                "mean_reward": [],
                "rew_action_rate": [],
                "rew_ang_vel_xy": [],
                "rew_collision": [],
                "rew_dof_acc": [],
                "rew_feet_air_time": [],
                "rew_lin_vel_z": [],
                "rew_torques": [],
                "rew_tracking_ang_vel": [],
                "rew_tracking_lin_vel": []
            }

        def safe_mean(value):
            """ 确保 `value` 是 float 或 list，否则转换 """
            if isinstance(value, torch.Tensor):
                return float(value.item())  # 0D Tensor 转换成 float
            elif isinstance(value, deque):
                return statistics.mean(list(value)) if len(value) > 0 else 0.0  # deque 转换为 list 计算均值
            elif isinstance(value, list) and len(value) > 0:
                return statistics.mean(value)  # list 计算均值
            elif isinstance(value, (int, float)):
                return float(value)  # 直接转换 float
            return 0.0  # 避免 None 造成错误

        # 记录数据
        if len(locs["rewbuffer"]) > 0:
            self.reward_history["mean_reward"].append(safe_mean(locs["rewbuffer"]))
            self.reward_history["rew_action_rate"].append(safe_mean(locs["ep_infos"][0].get("rew_action_rate", 0)))
            self.reward_history["rew_ang_vel_xy"].append(safe_mean(locs["ep_infos"][0].get("rew_ang_vel_xy", 0)))
            self.reward_history["rew_collision"].append(safe_mean(locs["ep_infos"][0].get("rew_collision", 0)))
            self.reward_history["rew_dof_acc"].append(safe_mean(locs["ep_infos"][0].get("rew_dof_acc", 0)))
            self.reward_history["rew_feet_air_time"].append(safe_mean(locs["ep_infos"][0].get("rew_feet_air_time", 0)))
            self.reward_history["rew_lin_vel_z"].append(safe_mean(locs["ep_infos"][0].get("rew_lin_vel_z", 0)))
            self.reward_history["rew_torques"].append(safe_mean(locs["ep_infos"][0].get("rew_torques", 0)))
            self.reward_history["rew_tracking_ang_vel"].append(
                safe_mean(locs["ep_infos"][0].get("rew_tracking_ang_vel", 0)))
            self.reward_history["rew_tracking_lin_vel"].append(
                safe_mean(locs["ep_infos"][0].get("rew_tracking_lin_vel", 0)))

        self.tot_timesteps += self.num_steps_per_env * self.env.num_envs
        self.tot_time += locs['collection_time'] + locs['learn_time']
        iteration_time = locs['collection_time'] + locs['learn_time']

        ep_string = f''
        if locs['ep_infos']:
            for key in locs['ep_infos'][0]:
                infotensor = torch.tensor([], device=self.device)
                for ep_info in locs['ep_infos']:
                    # handle scalar and zero dimensional tensor infos
                    if not isinstance(ep_info[key], torch.Tensor):
                        ep_info[key] = torch.Tensor([ep_info[key]])
                    if len(ep_info[key].shape) == 0:
                        ep_info[key] = ep_info[key].unsqueeze(0)
                    infotensor = torch.cat((infotensor, ep_info[key].to(self.device)))
                value = torch.mean(infotensor)
                self.writer.add_scalar('Episode/' + key, value, locs['it'])
                ep_string += f"""{f'Mean episode {key}:':>{pad}} {value:.4f}\n"""
        mean_std = self.alg.actor_critic.std.mean()
        fps = int(self.num_steps_per_env * self.env.num_envs / (locs['collection_time'] + locs['learn_time']))

        self.writer.add_scalar('Loss/value_function', locs['mean_value_loss'], locs['it'])
        self.writer.add_scalar('Loss/surrogate', locs['mean_surrogate_loss'], locs['it'])
        self.writer.add_scalar('Loss/learning_rate', self.alg.learning_rate, locs['it'])
        self.writer.add_scalar('Policy/mean_noise_std', mean_std.item(), locs['it'])
        self.writer.add_scalar('Perf/total_fps', fps, locs['it'])
        self.writer.add_scalar('Perf/collection time', locs['collection_time'], locs['it'])
        self.writer.add_scalar('Perf/learning_time', locs['learn_time'], locs['it'])
        if len(locs['rewbuffer']) > 0:
            self.writer.add_scalar('Train/mean_reward', statistics.mean(locs['rewbuffer']), locs['it'])
            self.writer.add_scalar('Train/mean_episode_length', statistics.mean(locs['lenbuffer']), locs['it'])
            self.writer.add_scalar('Train/mean_reward/time', statistics.mean(locs['rewbuffer']), self.tot_time)
            self.writer.add_scalar('Train/mean_episode_length/time', statistics.mean(locs['lenbuffer']), self.tot_time)

        str = f" \033[1m Learning iteration {locs['it']}/{self.current_learning_iteration + locs['num_learning_iterations']} \033[0m "

        if len(locs['rewbuffer']) > 0:
            log_string = (f"""{'#' * width}\n"""
                          f"""{str.center(width, ' ')}\n\n"""
                          f"""{'Computation:':>{pad}} {fps:.0f} steps/s (collection: {locs[
                            'collection_time']:.3f}s, learning {locs['learn_time']:.3f}s)\n"""
                          f"""{'Value function loss:':>{pad}} {locs['mean_value_loss']:.4f}\n"""
                          f"""{'Surrogate loss:':>{pad}} {locs['mean_surrogate_loss']:.4f}\n"""
                          f"""{'Mean action noise std:':>{pad}} {mean_std.item():.2f}\n"""
                          f"""{'Mean reward:':>{pad}} {statistics.mean(locs['rewbuffer']):.2f}\n"""
                          f"""{'Mean episode length:':>{pad}} {statistics.mean(locs['lenbuffer']):.2f}\n""")
                        #   f"""{'Mean reward/step:':>{pad}} {locs['mean_reward']:.2f}\n"""
                        #   f"""{'Mean episode length/episode:':>{pad}} {locs['mean_trajectory_length']:.2f}\n""")
        else:
            log_string = (f"""{'#' * width}\n"""
                          f"""{str.center(width, ' ')}\n\n"""
                          f"""{'Computation:':>{pad}} {fps:.0f} steps/s (collection: {locs[
                            'collection_time']:.3f}s, learning {locs['learn_time']:.3f}s)\n"""
                          f"""{'Value function loss:':>{pad}} {locs['mean_value_loss']:.4f}\n"""
                          f"""{'Surrogate loss:':>{pad}} {locs['mean_surrogate_loss']:.4f}\n"""
                          f"""{'Mean action noise std:':>{pad}} {mean_std.item():.2f}\n""")
                        #   f"""{'Mean reward/step:':>{pad}} {locs['mean_reward']:.2f}\n"""
                        #   f"""{'Mean episode length/episode:':>{pad}} {locs['mean_trajectory_length']:.2f}\n""")

        log_string += ep_string
        log_string += (f"""{'-' * width}\n"""
                       f"""{'Total timesteps:':>{pad}} {self.tot_timesteps}\n"""
                       f"""{'Iteration time:':>{pad}} {iteration_time:.2f}s\n"""
                       f"""{'Total time:':>{pad}} {self.tot_time:.2f}s\n"""
                       f"""{'ETA:':>{pad}} {self.tot_time / (locs['it'] + 1) * (
                               locs['num_learning_iterations'] - locs['it']):.1f}s\n""")
        print(log_string)

        # 训练结束时绘制 reward 收敛曲线（每 500 轮 或 训练结束时）
        # if locs["it"] % 1500 == 0 or locs["it"] == locs["max_iterations"] - 1:
        if locs["it"] % 5000 == 0:
            num_rewards = len(self.reward_history)  # 统计 reward 数量
            num_cols = 3  # 每个窗口 3 列
            num_rows = 3  # 每个窗口 3 行
            rewards_per_figure = num_cols * num_rows  # 每个窗口最多显示 9 个奖励

            reward_items = list(self.reward_history.items())  # 转换为列表
            num_figures = math.ceil(num_rewards / rewards_per_figure)  # 计算需要多少个窗口

            for fig_idx in range(num_figures):  # 依次创建多个窗口
                fig, axes = plt.subplots(nrows=num_rows, ncols=num_cols, figsize=(15, 10))
                axes = axes.flatten()  # 变成 1D 数组，方便索引

                start_idx = fig_idx * rewards_per_figure  # 计算当前窗口的起始索引
                end_idx = min(start_idx + rewards_per_figure, num_rewards)  # 计算终止索引

                for i, (key, values) in enumerate(reward_items[start_idx:end_idx]):
                    axes[i].plot(values, label=key, color="b")
                    axes[i].set_title(key)
                    axes[i].set_xlabel("Iteration")
                    axes[i].set_ylabel("Reward Value")
                    axes[i].grid(True)
                    axes[i].legend()

                plt.tight_layout()
                save_dir = os.path.join(self.log_dir, "reward_plots")
                os.makedirs(save_dir, exist_ok=True)
                fig_path = os.path.join(save_dir, f"rewards_iter_{locs['it']:06d}_fig{fig_idx}.png")
                plt.savefig(fig_path)
                print(f"✅ Reward plot saved to: {fig_path}")
                plt.close(fig)  # 释放内存

    def save(self, path, infos=None):
        torch.save({
            'model_state_dict': self.alg.actor_critic.state_dict(),
            'optimizer_state_dict': self.alg.optimizer.state_dict(),
            'iter': self.current_learning_iteration,
            'infos': infos,
            }, path)

    def load(self, path, load_optimizer=True):
        loaded_dict = torch.load(path)
        self.alg.actor_critic.load_state_dict(loaded_dict['model_state_dict'])
        if load_optimizer:
            self.alg.optimizer.load_state_dict(loaded_dict['optimizer_state_dict'])
        self.current_learning_iteration = loaded_dict['iter']
        return loaded_dict['infos']

    def get_inference_policy(self, device=None):
        self.alg.actor_critic.eval() # switch to evaluation mode (dropout for example)
        if device is not None:
            self.alg.actor_critic.to(device)
        return self.alg.actor_critic.act_inference